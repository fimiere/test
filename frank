const config = require('../config.js');
const chai = require('chai');
const chaiAsPromised = require("chai-as-promised");
const chaiHttp = require('chai-http');
const expect = chai.expect;
const randomstring = require('randomstring');
require('dotenv').config();
chai.use(chaiAsPromised);
chai.use(chaiHttp);
chai.should();



describe('my interview',  async ()  => {
    
    it('POST a random id' , async () => {
    
         const result = await chai.request('https://jsonplaceholder.typicode.com/todos')
        .post('')
        .send(
            {
                title: 'foo',
                body: 'bar',
                userId: 1
            }
            
        );
        expect(result).to.have.status(201);
        result.body.title.should.be.eql('foo')
        result.body.userId.should.be.eql(1)
        result.body.body.should.be.eql('bar')
        result.body.should.be.a('object');
        expect(result.body).to.have.property('title');
        expect(result.body).to.have.property('id');
        expect(result.body).to.have.property('userId');
        expect(result.body).to.have.property('body');
        
    }
    );
    it('update  ', async () => {
        const result = await chai.request('https://jsonplaceholder.typicode.com/posts')
        .put('/1')
        .send(
            {
               id: 1,
               title: 'foo',
               body: 'bar',
              userId: 1
            }
        );
        expect(result).to.have.status(200);
        result.body.title.should.be.eql('foo')
        result.body.userId.should.be.eql(1)
        result.body.body.should.be.eql('bar')
        result.body.id.should.be.eql(1)
        expect(result.body).to.have.property('title');
        expect(result.body).to.have.property('id');
        expect(result.body).to.have.property('userId');
        expect(result.body).to.have.property('body');
    }
    );

    it('Remove object', async() => {
        const result = await chai.request('https://jsonplaceholder.typicode.com/todos')
        .del('/1')
        
    }
    );
    expect(result).to.have.status(204);
}
);
);
